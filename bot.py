import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
import asyncio

# C·∫•u h√¨nh log
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# H√†m x·ª≠ l√Ω /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Xin ch√†o! T√¥i l√† TagAll Bot ü§ñ. G√µ /tagall ƒë·ªÉ tag m·ªçi ng∆∞·ªùi trong nh√≥m.")

# H√†m x·ª≠ l√Ω /tagall
async def tag_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    if chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m.")
        return

    try:
        members = []
        async for member in context.bot.get_chat_administrators(chat.id):
            if not member.user.is_bot:
                members.append(member.user)
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y th√†nh vi√™n nh√≥m: {e}")
        await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y danh s√°ch th√†nh vi√™n. H√£y ƒë·∫£m b·∫£o bot l√† admin.")
        return

    tag_text = " ".join([f"@{user.username}" if user.username else user.first_name for user in members])
    if tag_text:
        await update.message.reply_text(f"Tag m·ªçi ng∆∞·ªùi n√®:\n{tag_text}")
    else:
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y ai ƒë·ªÉ tag.")

# Ch·∫°y app trong m√¥i tr∆∞·ªùng ƒë√£ c√≥ event loop (Render, Jupyter, v.v.)
def main():
    app = ApplicationBuilder().token("8179738384:AAEgHjuelNihVY2tZYMG4aOz5iUZjvEeOeA").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tagall", tag_all))

    logger.info("Bot ƒëang ch·∫°y...")
    app.run_polling()  # Kh√¥ng d√πng asyncio.run n·ªØa

if __name__ == '__main__':
    main()
